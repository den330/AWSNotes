1. DNS: Translates the human friendly hostnames into ip addresses.

2. www.google.com
    TLD(top-level domain): .com
    SLD(2nd-level domain): google
    subdomain(3rd-level domain): www
    Domain Name: google.com (Domain name only includes 1st and 2nd level domain, not 3rd or beyond)

3. Domain records: A, AAAA, CName....

4. Zone files contain domain records as well as additional administrative and operational information necessary for DNS functioning.

5. Name Servers: 1. root name servers(deciding between .com, .net, .org....)
              2. TLD Name Servers(deciding google.com or example.com or .....)
              3. Authoritative Name Servers(the one contains the zone file, which contains DNS records that helps mapping your url into the corresponding ip, that result will go back to your local dns server, and cached there)
              4. local DNS server(Caching DNS Resolvers): Local DNS servers cache the DNS query results for a period determined by the TTL (Time to Live) associated with each DNS record
Flow after url entered: 4, or 4 -> 1 -> 2 -> 3

6. Route 53: Authoritative Name Server(Authoritative DNS), these servers hold the zone files for their specific domains and answer queries based on the records in these files.

Authoritative: as the customer, you get to update the DNS records.

7. Route 53 is also a domain register, and can check the health of your resources.

8. Route 53 is the ONLY AWS service that provides 100% availability SLA: when a service offers a 100% availability Service Level Agreement (SLA), it signifies a commitment from Amazon Web Services to ensure that the service is fully operational and accessible at all times, without any interruptions.

9. DNS Records: How you want to route traffic for a domain. It contains:
        a. Domain Name / Subdomain name
        b. RecordType: A or AAAA or ....
        c. Value: 12.34.56.78
        d. Routing Policy: how Route 53 responds to queries
        e. TTL: amount of time the record cached at DNS Resolvers(Local DNS)

10. Route 53 supports the following DNS record types:
    A / AAAA / CNAME / NS (must know)
    CAA / DS / MX / NAPTR / SOA ....   (advanced)

11. A: maps a hostname to IPv4

12. AAAA: maps a hostname to IPv6

13. CNAME: maps a hostname to another hostname. (The target is a domain name which must have an A or AAAA record) (does NOT have to reference the name on the same hosted zone.)
    
    You can't create CNAME record for the top node of a DNS namespacve(Zone Apex): so no CNAME for like: example.com itself, but you can do it for www.example.com.
    
    Example Usage
    For instance, if you have:

    www.example.com mapped to an IP address via an A record,
    You can then use a CNAME record to point blog.example.com to www.example.com.
    When someone accesses blog.example.com, the DNS resolution process will follow these steps:

    Look up the CNAME record for blog.example.com which points to www.example.com.
    Resolve www.example.com to its corresponding A record to get the IP address.

14. NS: Name Servers for the Hosted Zone: the address for DNS servers themselves, it controls how traffic is routed to a domain

15. Hosted Zones is basically the Zone file on aws.
    
    a. Public hosted zones: contains records that specify how to route traffic on the internet(public domain names: app1.mypublicdomain.com)
    b. Private hosted zones: contains records that specify how to route traffic within one or more VPCs(private domain names: app1.company.internal)
    c. The DNS records in public hosted zones are served by Amazon's globally distributed DNS servers, making them accessible from anywhere on the internet.
    d. The DNS records in private hosted zones are resolved by the DNS servers running within the VPC infrastructure, which are separate from the public DNS infrastructure. (there is caching for this as well, similiar but not identical to the ones for the public ones.)

16. 0.5$ per month per hosted zone.

17. don't consider Route53 itself as a single server, but a set of config that will be deployed on many different (type of) servers.

18. cloudshell cmd to test if a record does map your host name to the ip(even if there is no server behind it):
-sudo yum install -y bind-utils
-dig example.com
(here, you can also do -nslookup example.com)

19. if you want to route hostname to the dns name of a ALB or some other AWS services, two options:
     a. CNAME + DNS Name
     b. A + Alias
for root domain like example.com, only b is ok. for others like api.example.com, either a or b is fine. (CNAME can only be used for subdomain, so if you want to route to an ALB for the root domain, only b can be selected!)

20 Routing Policy: Simple Policy:
   a. Route traffic to a single resource.
   b. If multiple values(IPs) are returned, random one is chosen by the CLIENT.
   c. if using alias, then only ONE resource can be specified.
   d. Can NOT be associated with health checks.

21 Routing Policy: Weighted Policy:
    a.Control the percentage of requests that go into each specific resource. (example: 30% to instance A, 50% to B, 20% to C)
    b. DNS records must have the same name and types, with the only differences being the value and weight.
    c. weight for a specific record / sum of all weight of all records = traffic percentage.  (the sum of all weight does NOT have to be 100.)
    d. can be associated with health checks.
    e. used for: load balancing between regions. Testing a new version of application   by sending a small amount of traffic to it.
    f. weight = 0 means no traffic will go to that specific resource.

22. Routing Policy: Latency-based Policy:
    a. Latency is based on users and aws REGIONS.
    b. can be associated with health check.
    c. have to specify region on top of ip address when setting up in route 53.

23. route53: multi region HA
    ALB: multi AZs HA within one specific region

24. route 53 health check, can be attached to each record, which allows automatic DNS failover. The types it can monitor:
    a. endpoint(application, server, other aws resources)
    b. other health check(Calculated health checks)
    c. cloudwatch alarm (more control)


25. monitor endpoint: send http request to /health for each record it attaches to, if:
    a. it gets 2xx/3xx status code => healthy (can also set up to pass/fail based on the first 5120 bytes of the response)
    b. else => unhealthy

    About 15 global health checkers will check the endpoint.

    default threshold: 3.  3 healthy => HEALTHY for THIS checker, 3 unhealthy => UNHEALTHY for THIS checker

    Default Check Interval: 30 sec, (can set to 10 - higher cost)

    Rule: if >18% of health checkers report the endpoint is HEALTHY, then ROUTE53 will consider it healthy. Otherwise, its unhealthy.

    Supports: HTTPS / HTTP / TCP

    Must configure your router / firewall to allow incoming traffic from route 53 health checkers.

26. Calculated Health Checks:
    a. Combine the result of multiple health checks(up to 256) into one.
    b. You can use OR, AND, or NOT to combine them
    c. Specify how health checks need to pass to make the parent to pass.
    d. usage: maintanance.

27. Health checks for private hosted zones:
    facts:
        a. all route53 health checkers are outside of VPC.
        b. hence they can't access private endpoints. (private subnet or on-premises resource)
    solution:
        Create a cloudwatch metric and associate a cloudwatch alarm, then create a health check that checks the alarm itself.

28. Routing Policy: Failover(Active-Passive):
    a. Route 53 at front, one primary ec2 instance, and one secondary instance(disaster recovery)
    b. Associate the primary one with health check(mandatory)
    c. if primary is unhealthy, it will then route to secondary.

29. Routing Policy: Geolocation
    1. not the same as Latency-based.
    2. based on physical location of the user
    3. specify location by continent, country, or by US state, if there is overlapping, the most precise one is selected.
    4. there should always be a default record in case there is no match on location.
    5. use case: website localization, restrict content distribution, load balancing..
    6. can be associated with health checks, if a server in a specific region becomes unhealthy and there is no other healthy server in a region that matches the geographic targeting criteria, the traffic will indeed be redirected to the default record.

30. Routing Policy: Geoproximity
    a. one instance in us-west-1, the other in us-east-1, if both bias are 0, then all users from center to the east go to us-east-1, all from center to the west, go to us-west-1.
    b. if, say us-east-1 got a bias of 50(positive), that "center line" will now shift to the west by some distance, some of the users that initially reach west, will now reach east server.
    c. adjust bias dynamically based on your changing need.

31. Routing Policy: IP-based
    a. routing based on USER's ip address.
    b. you provide a mapping between a CIDR and the endpoint. (users within this CIDR range go to endpoint A, the ones from that range go to endpoint B)
    c. use case: optimize performance, reduce network cost.
    d. example: route end users from a particular ISP to a specific endpoint.

32. Routing Policy: Multi-value answer
    a. used when routing traffic to MULTIPLE resources.
    b. route 53 return multiple values(ip addresses) / resources.
    c. can be associated with health checkes(return only values for healthy resources)
    d. up to 8 healthy records are returned for each multi-value query
    e. it is NOT a substitute for having an ELB
    f. once the list of ip addresses is received, the client-side can pick which one to go for.
    g. different from simple policy with multiple values as simple policy DOES not allow health checks, hence unhealthy ip might be returned.
    








