1. General Graph:
    
    https://drive.google.com/file/d/1HJXxHXpL3R_oD3mlw1TTQsrsLAcFYNwa/view?usp=drive_link

    Relevant Concepts:
        1. Region: This is a geographical area that hosts multiple isolated locations known as Availability Zones.

        2. VPC (Virtual Private Cloud): A virtual network dedicated to your AWS account where you can define and manage a virtual network space.

        3. Subnets: These are segments within a VPC that allow you to allocate IP address ranges and place resources into those segments.
        - Public Subnet: Generally, resources like web servers are placed here, with internet access via an Internet Gateway.
        - Private Subnet: Used for resources that shouldn't be directly accessible from the internet, such as databases.

        4. Internet Gateway: Allows communication between resources in your VPC and the internet.

        5. NAT Gateway: Enables instances in a private subnet to connect to the internet or other AWS services but prevents the internet from initiating a connection with those instances.

        6. Security Groups and Network Access Control Lists (NACLs): Act as firewalls for associated EC2 instances, controlling both inbound and outbound traffic at the instance and subnet level.

        7. Router and Route Table: Defines rules to direct network traffic from one subnet to another subnet or out to the internet.

        8. VPN Gateway and Direct Connect (DX): Provide secure connections from your on-premise network to your AWS and other VPCs.
        - VPN Gateway: Connects your on-premise networks to your VPC over the internet securely.
        - Direct Connect: Establishes a dedicated private connection from a remote network to your VPC.

        9. VPC Endpoints: Allows private connections to AWS services using private IP addresses.

        10. Transit Gateway: Connects VPCs and on-premise networks through a central hub, simplifying network management and reducing operational costs.

        11. VPC Peering Connections: Allows networking connections between two VPCs, enabling you to route traffic between them using private IP addresses.

        12. CloudWatch: Monitors your AWS resources and applications, providing logs, metrics, and events.

        13. S3 (Simple Storage Service): Provides scalable object storage for data backup, archival, and analytics.

        14. Customer and VPN Gateway: Facilitates a secure and private connection between your corporate data center and your VPC, typically through a VPN connection.

2. CIDR: Classless Inter-Domain Routing - a method for allocating IP addresses. (It is used in Security Groups rules and AWS networking in general.)
    a. CIDR notation is expressed as WW.XX.YY.ZZ/NN, where WW.XX.YY.ZZ(base IP) represents the IP address and /NN (the prefix length, or subnet mask) specifies how many bits are used for the network portion of the address. The remaining bits are used for host addresses within the network.
        example:
            1. 0.0.0.0/0
                Interpretation: This represents all IP addresses. In the context of security rules, using 0.0.0.0/0 means the rule applies to any IP address from anywhere in the world. It's common in rules that specify public internet access.
            2. 192.168.0.0/26
                Interpretation: The /26 indicates that the first 26 bits are the network portion of the address. This leaves 6 bits for host addresses (since 32 - 26 = 6). Therefore, this subnet can include:
                    2^6 = 64 addresses, ranging from 192.168.0.0 to 192.168.0.63
                    192.168.0.0 is the network address and 192.168.0.63 is the broadcast address, with the addresses in between usable for hosts within this subnet.

3. Public vs Private IP (IPv4)
    a. The Internet Assigned Numbers Authority(IANA) established certain blocks of IPv4 addresses for the use of private(LAN) and public(Internet) addresses.

    b. Private IP can only allow certain values:
        1. 10.0.0.0 - 10.255.255.255(10.0.0.0/8) in big networks.
        2. 172.16.0.0 - 172.31.255.255(172.16.0.0/12) -> AWS default VPC range.
        3. 192.168.0.0 - 192.168.255.255 (192.168.0.0/16) -> home networks

    c. All the rest of the IP addresses on the Internet are Public.



VPC: Virtual Private Cloud

1. All new AWS accounts have a default VPC (for each region.)

2. When you launch new EC2 instances without specifying a VPC, they will automatically be placed into the default VPC. This simplifies the process for new users or applications that do not require custom network configurations. In the default VPC, if no subnet is explicitly chosen during the instance launch process, AWS selects the default subnet based on the Availability Zone that the instance is created in.

3. Default VPC has Internet connectivity and all EC2 instances inside it have public IPv4 addresses, a public and a private IPv4 DNS names. The default VPC in AWS is configured with ease of use in mind, providing every instance with public internet access out of the box. For configurations that require true private subnets (without direct internet access), you'll typically need to set up a custom VPC.

4. You can have multiple VPCs in an AWS region(soft limit: 5)
5. Max CIDR per VPC is 5, for each CIDR: min size is /28, max size is /16
6. Because VPC is private, only the private IPv4 ranges are allowed.
7. Your VPC CIDR should NOT overlap with your other networks(e.g., corporate)
    example: VPN Connections: If your on-premises network uses the 192.168.10.0/24 range and your cloud VPC also uses 192.168.10.0/24, setting up a VPN between the two would lead to routing conflicts. Routers would not be able to determine whether traffic destined for 192.168.10.10 should be directed to a host in the on-premises network or a host in the cloud VPC.

8. Subnet is a subrange of a CIDR block.
    a. AWS reserves 5 IP addresses(first 4 and last 1) in each subnet.
    b. These 5 IP addresses are not available for use and can't be assigned to an EC2 instance.
    c. Example:
        if the CIDR block of the subnet is 10.0.0.0/24, then reserved IP addresses are:
            1. 10.0.0.0 - Network Address
            2. 10.0.0.1 - reserved by AWS for the VPC router
            3. 10.0.0.2 - reserved by AWS for mapping to Amazon-provided DNS.
            4. 10.0.0.3 - reserved by AWS for future use.
            5. 10.0.0.255 - Network Broadcast Address. AWS does not support broadcast in a VPC, therefore the address is reserved.

    d. if you need 29 IP addresses for EC2 instances:
        1. you cannot choose a subnet of size /27:
            2^(32 - 27) = 32 => 32 - 5 = 27 < 29
        2. You need to choose a subnet of size /26:
            2^(32 - 26) = 64 => 64 - 5 = 59 > 29

    e. An AZ can contain multiple subnets, public or private or both.
    f. allow public ip auto assign on public ones, and don't allow it on private ones.


Internet Gateway(IGW): Allows resources(like EC2 instances) in a VPC connect to the internet.
    1. It scales horizontally and is highly available and redundant.
    2. Must be created separately from a VPC.
    3. One VPC can only be attached to one IGW, and vice versa.
    4. Internet Gateways on their own do not allow internet access, we must also edit Route tables to make it work.
    5. There aren't separate physical or virtual routers for each subnet. The VPC router is a universal function that exists for the entire VPC. It follows the rules set on the route tables which is attached to each subnet.
    6. demo steps(internet access for PUBLIC subset):
        1. Create VPC
        2. Create a public subnet(enable public ip assignment) and a private one under the same AZ.
        3. Create a IGW, and then attach it to this VPC.
        4. Create a public route table and a private route table correspondingly.
        5. Add public subnet association to your public route table, and add private one to your private route table.
        6. Create a EC2 instance in your public subnet.
        7. Edit Routes in your public Route table.(if destination is a local IP, route to local, if not, route to the IGW we just created.) 
    7. What if we want to connect to a EC2 instance residing within a private subnet?
        1. Create a Bastion Hosts(which essentially is just a EC2 instance) in the public subnet.
        2. This Bastion Host does have access to that particular EC2 instance in the private subnet, since it is inside the same VPC.
        3. We first connect to that Bastion Host via SSH from the internet, and then Bastion Host will then SSH into the private EC2 instance.
        4. The bastion is in public subnet which is then connected to all other private subnet.
        5. Bastion Host security group MUST allow inbound from the internet on port 22 from restricted CIDR, for example the public CIDR of your corporation.
        6. Security Group of the private EC2 instances must allow the security group of the Bastion Host, or the private IP of the Bastion host.

    8. What if we want our private EC2 instance to INITIATE a connection TO the internet, instead of waiting for request FROM the internet(using Bastion Host)?
        1. NAT Instance(outdated solution)
        2. NAT Gateways(current solution)

    9. NAT(Network Address Translation) Instance(just a manually created EC2 instance with some special config):
        a. must be launched in a public subnet.
        b. Must disable EC2 setting: Source / destination check
        c. Must have Elastic IP attached to it.
        d. Route Tables must be configured to route traffic from private subnets to the NAT Instance.
        e. Private EC2(with its original source IP) -> NAT Instance(replace the source ip with its own source IP) -> IGW -> Internet. (VPC router is emitted here, it just implements the rules specified in router tables, both private ones and public ones.)
        f. the internet can only see the source IP of the NAT instance, and will send return traffic to this IP.
        g. once return traffic reaches NAT Instance, the NAT instance will then redirect the traffic to its original source IP, which is the private EC2 instance.
        h. not HA / resilient out of the box. (you have to create ASG in multi-AZ mannually)
        i. you have to manage Security Groups / rules yourself.
        j. pay per hour for bandwidth, usage, and EC2 instance type and size.

    10. NAT Gateways:
        a. AWS managed NAT, higher bandwidth, high availability, no administration.
        b. pay per hour for usage and bandwidth
        c. NATGW is created in a specific AZ, uses an Elastic IP
        d. It can NOT be used by EC2 instance in the same subnet(only from other subnets.)
        f. Requires an IGW(Private Subnet -> NATGW -> IGW)
        g. 5 Gbps of bandwidth with auto scaling up to 100 Gbps.
        h. No need to manage Security Groups by yourself.
        i. It is only resilient within a single AZ. You must create multile NAT Gateways in multiple AZs for fault-tolerance. (A NAT Gateway is inherently resilient within the Availability Zone (AZ) it is deployed in. This means it is designed to handle failures within its AZ without disrupting service. However, if the entire AZ faces a disruption, the NAT Gateway within that AZ will also be affected.)


Security Groups & NACLs:

    1. Security Group -> instance / service.
    2. NACL -> Subnet.
    3. Incoming Request -> NACL inbound rules -> Subnet -> SG Inbound Rules -> EC2 Instance
    4. SG is stateful, NACL is stateless. (if a inbound request is allowed, then the response traffic is automatically allowed by the SG, but not by the NACL. In other words, SG outbound rules won't apply in this case, but NACL outbound rules still do.)
    5. Outgoing Request -> SG outbound rules -> Subnet -> NACL outbound rules -> IGW -> Internet. (same as incoming request, if the outgoing traffic is allowed, then the response of the outgoing request will still be checked by NACL inbound rules, but won't be by SG inbound rules.)

NACL: Network Access Control List(NACL)
    1. NACL are like a firewall which controls traffic from and to subnets.
    2. One NACL per Subnet: Each subnet in a VPC must be associated with one (and only one) NACL, but a single NACL can be associated with multiple subnets.
    3. You define NACL rules:
        a. Rules have a number(1 - 32766), lower number -> higher precedence -> first to be evaluated by the NACL (so the order is determined by this number, not by manual drag.)
        b. First rule match will drive the decision.
        c. Example: 
            1. #100 Allow 10.0.0.10/32
            2. #200 DENY 10.0.0.10/32
            The IP address will be allowed as 100 has a higher precedence over 200.
        d. The last rule is an asterisk(*) and denies a request in case of no rule match.
        e. AWS recommends adding rules by increment of 100.
    4. Default NACL accepts everything inbound / outbound with the subnet it's associated with.
    5. Newly created NACL will deny everything.
    6. NACL are a great way of blocking specific IP address at SUBNET level.
    7. Recommend: Do NOT modify the default NACL, instead,  create custom NACLs.

    Ephemeral Ports:
        1. For any two endpoints to establish a connection, they must use ports.
        2. Clients connect to a defined port, and expect a response on an ephemeral port.
        3. Different Operating Systems use different port ranges, examples:
            a. IANA & MS Windows 10 -> 49152 - 65535
            b. many Linux Kernels -> 32768 - 60999

    NACL with Ephemeral Ports:
        1. Imagine an web instance in a public subnet trying to connect to a DB instance in a private subnet.
        2. The DB instance will take traffic from port 3306.
        3. Hence, on the outbound rules of the NACL attached to the public subnet, we must allow Outbound TCP on port 3306, to DB subnet CIDR. (When you set an outbound rule on a port in the context of network firewalls or security groups, you're referring to the destination port, not the port on the source instance)
        4. on the inbound rules of the NACL attached to the private subnet, we must allow inbound TCP on port 3306 From Web Subnet CIDR.
        5. Here comes the tricky part, when the DB send back the response for the request, the original source port on the web instance is a random one (ephemeral port). How do we set inbound rules for the public NACL in this case?
        6. private NACL must first allow Outbound TCP on port 1024-65535 to Web Subnet CIDR.
        7. public NACL must allow Inbound TCP on port 1024-65535 From DB Subnet CIDR.

VPC Peering
    1. Privately connect two VPCs using AWS network.
    2. Make them behave as if they were in the same network.
    3. Must NOT have overlapping CIDRs.
    4. VPC Peering connection is NOT transitive(must be established for each VPC that need to communicate with one another). A -> B -> C does not mean A -> C, we must also establish A -> C separately.
    5. You must update route tables in each VPC's subnets to ensure EC2 instances can communicate with each other.
    6. you can create VPC Peering connection between VPCs in different AWS accounts / regions.
    7. You can reference a security group in a peered VPC(works across accounts - same region)


VPC Endpoint: Access AWS Service(S3, SNS...) outside of your VPC, using AWS internal network.(so no need to go out onto the public internet, hence the speed and safety)
    1. Redundant, scale horizontally.
    2. They remove the need for IGW, NATGW, .. to access AWS services.
    3. Two Types:
        a. Interface Endpoint(PrivateLink)
            1. Provision an ENI(private ip address) as an entry point(must attach Security Group)
            2. Supports most AWS services.
            3. cost per hour + cost per GB data processed.
        b. Gateway Endpoint
            1. Provision a gateway and must be used as a target in a route table(does not use security groups)
            2. Supports both S3 and DynamoDB
            3. Free

     For access to S3 and DynamoDB, Gateway Endpoint is USUALLY preferred as its free and easier to set up.

     Interface Endpoint is preferred when connecting to on-site / another vpc / or a different region.


VPC Flow Logs: Capture information about IP traffic going into your interfaces.
    a. VPC Flow Logs
    b. Subnet Flow Logs
    c. Elastic Network Interface(ENI) Flow Logs

    1. Helps to monitor and troubleshoot connectivity issues.
    2. Flow logs data can go to S3, CloudWatch Logs, and Kinesis Data Firehose
    3. Captures network information from AWS managed interfaces too: ELB, RDS, ElastiCache, Redshift, WorkSpaces, NATGW, Transit Gateway.

    It looks like this: https://drive.google.com/file/d/1AOY0WBOa57rC_Kp2N8F_ol_QX6kbL2fv/view?usp=sharing

    1. srcaddr & dstaddr - help identify problematic IP
    2. srcport & dstport - help identify problematic ports.
    3. Action - success or failure of the request due to Security Group / NACL 
    4. Can be used for analytics on usage patterns, or malicious behavior
    5. Query VPC flow logs using Athena on S3 or CloudWatch Logs Insights.

    Troubleshoot SG and NACL issues: Look at the "Action" field
        1. Inbound REJECT => NACL or SG
        2. Inbound ACCEPT, Outbound REJECT => NACL (since SG is stateful, once accepted inbound, outbound traffic will NOT be checked at SG level)

        3. Outbound REJECT => NACL or SG
        4. Outbound ACCEPT, Inbound REJECT => NACL (same reason as above)
    
    Typical Architectures
        
        1. VPC Flow Logs -> CloudWatch Logs -> CloudWatch Contributor Insights -> Top 10 IP address contributing the most network traffic flow.
        2. VPC Flow Logs -> CloudWatch Logs - (with Metric Filter like SSH, RDP...) -> CW Alarm - (Alert) -> Amazon SNS
        3. VPC Flow Logs -> S3 Bucket -> Amazon Athena(Analyze) -> Amazon QuickSight(Visualize)

    (GPT: AWS Athena is not a database by itself. Instead, it is a query service that allows you to perform SQL queries directly on data stored in Amazon S3. Athena lets you analyze your data in S3 using SQL without having to first load it into a separate database. It acts as a way to execute queries and retrieve results from the data stored in S3, but it does not store data itself. The actual data remains in your S3 buckets, and Athena integrates with the AWS Glue Data Catalog to access the metadata (schema and structure) about your files stored in S3, which allows it to interpret and query the data as if it were in a traditional database.)


Site-to-Site VPN: encrypted, on the public internet, typically establish connection between aws instances with corporate data centers.

    1. Virtual Priavte Gateway
        a. VPN concentrator on the AWS side of the VPN connection
        b. created and attached to the VPC from which you want to create the site-to-site VPN connection.
        c. Possibility to customize the ASN(Autonomous System Number)

    2. Customer Gateway(CGW)
        a. Software application or physical device on customer side of the VPN connection
        b. It must have a public internet-routable IP address unless it's behind NAT; in that case, you would use the public IP address of the NAT device.
    
    
    Instances -> Virtual Private Gateway - (Site-to-Site VPN) -> Customer Gateway(Public IP) -> Corporate Data Center(Private IP)

    Customer Gateway Device(On-premises)
        1. What IP address to use?
            a. Public Internet-routable IP address for your customer Gateway device
            b. If it's behind a NAT device that's enabled for NAT traversal(NAT-T), use the public IP address of the NAT device.

        2. Important Step: enable Route Propagation for the Virtual Private Gateway in the route table that is associated with your subnets.

        3. If you need to ping your EC2 instances from on-premises, make sure you add the ICMP protocol on the inbound of your security groups.


    AWS VPN CloudHub: provide secure communication between multiple sites, if you have multiple VPN connections.

        1. Low-cost hub-and-spoke model for primary or secondary network connectivity between different locations(VPN only)

        2. It's a VPN connection so it goes over the public internet.

        3. To set it up, connect multiple VPN connections on the same VGW, setup dynamic routing and configure route tables.



Direct Connect(DX)

    1. Provides a dedicated private connection from a remote network to your VPC.
    2. Dedicated connection must be setup between your DC and AWS Direct Connect Locations.
    3. You need to setup a Virtual Private Gateway(the same one as in Site to Site VPN) on your VPC.
    4. Access public resources(like S3) and private (like EC2) on same connection.
    5. Use Cases:
        a. Increase bandwidth throughput - working with large data sets - lower cost
        b. More consistent network experience - applications using real-time data feeds.
        c. Hybrid Environment (on prem + cloud)
        d. Supports both IPv4, and IPv6
    6. See picture(pay attention to line color): https://drive.google.com/file/d/1DVptBpdvw-AcZlYgEXkmeQ-oCKCs7jVM/view?usp=sharing


    Direct Connect Gateway

        1. If you want to setup a Direct Connect to one or more VPC in many different regions(same account), you must use a Direct Connect Gateway.
        2. See Picture: https://drive.google.com/file/d/1rKGyhwnPbReR6FNjaa4gsCYiYRW72YMg/view?usp=sharing

    
    Connection Types
        
        1. Dedicated Connections: 1 Gbps, 10 Gbps and 100 Gbps capacity.
            a. Physical ethernet port at Direct Connect Location dedicated to a customer
            b. Request made to AWS first, then completed by AWS Direct Connect Partners.

        2. Hosted Connections: 50 Mbps, 500 Mbps, to 10 Gbps
            a. Connection requests are made via AWS Direct Connect Partners.
            b. Capacity can be added or removed on demand.
            c. 1,2,5,10 Gbps available at select AWS Direct Connect Partners.

        3. Lead times are often longer than 1 month to establish a new connection. (so if you need to connect in a week, DX is NOT a solution)
    
    Encryption
        
        1. Data in transit(from customer DC to Direct Connect Location) is NOT encrypted but is private.
        2. AWS Direct Connect + VPN provides an IPsec-encrypted private connection.
        3. Good for an extra level of security, but slightly more complex to put in place.

    Resiliency

        1. High Resiliency for Critical Workloads. (One Connection at multiple locations)
        2. Maximum Resiliency for Critical Workloads.(separate connections terminating on separate devices in more than one locations)
        3. See picture: https://drive.google.com/file/d/1uACodqk36-iSbmns8ngrdNMf23SO4uwD/view?usp=sharing
        4. DX + Site-to-Site VPN
            a. In case Direct Connect fails, you can set up a backup Direct connection(expensive), or a Site-to-Site VPN connection.
            b. See picture: https://drive.google.com/file/d/1rLxrxVD4un4vQC0QdXcNeQ0-fi5ELI6S/view?usp=sharing


Transit Gateway
    (See picture: https://drive.google.com/file/d/1k-G5z4hmRfJHX89_ByRf6JuPWAgO05B5/view?usp=sharing)
    
    1. Have TRANSITIVE peering between thousands of VPC and on-premises, hub-and-spoke(star) connection.
    2. Regional resource, can work cross-region
    3. Share cross-account using Resource Access Manager(RAM)
    4. Can peer Transit Gateways across regions.
    5. Route Table for transit gateway: limit which VPC can talk with other VPC.
    6. Works with Direct Connect Gateway, VPN connections.
    7. It is the ONLY service in AWS that supports IP Multicast

    Site-To-Site VPN ECMP
    (see picture: https://drive.google.com/file/d/1jaPtkU4FRi9YqfuIfiu6ZOkEJt3ptvN0/view?usp=sharing)
    
    1. ECMP: Equal-cost multi-path routing.
    2. Routing strategy to allow to forward a packet over multiple best path.
    3. Use case: 
        a. create multiple Site-to-Site VPN connections to increase the bandwidth of your connection to AWS. 

    Share Direct Connect between multiple accounts
        1. see picture: https://drive.google.com/file/d/1C8_I8_y9WYJluwW7QFYgHa1Q2HMWZzVU/view?usp=sharing

    
