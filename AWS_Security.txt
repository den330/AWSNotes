Encryption
    1. Encryption in flight(TLS / SSL): Data is encrypted before sending and decrypted after receiving.
        • TLS certificates help with encryption (HTTPS)
        • Encryption in flight ensures no MITM(man in the middle attack) can happen.
        • https://drive.google.com/file/d/1muu_sGJ4orIThSuxNLKCABrh2O-3LWIv/view?usp=sharing

    2. Server-side encryption at rest
        • Data is encrypted after being received by the server.
        • Data is decrypted before being sent.
        • It is stored in an encrypted form thanks to a key(usually a data key) 
        • The encryption / decryption keys must be managed somewhere, and the server must have access to it.
        • https://drive.google.com/file/d/1G_TYGYKCwAZimSndUe89u8P0UayOK5Kl/view?usp=sharing

    3. Client-side encryption
        • Data is encrypted by the client and never decrypted by the server.
        • Data will be decrypted by a receiving client.
        • The server should NOT be able to decrypt the data.
        • Cloud leverage Envelop Encryption.
        • https://drive.google.com/file/d/1X3kYADRXea4wH8Y__ArdgfBdjo4yup4N/view?usp=sharing


-------------------------------------------------------------------------------------------------

AWS KMS(Key Management Service)

    • Anytime you hear "encryption" for an AWS service, it is most likely KMS.
    • AWS manages encryption keys for us.
    • Fully integrated with IAM for authorization.
    • Easy way to control access to your data.
    • Able to audit KMS Key usage using CloudTrail.
    • Seamlessly integrated into most AWS services(EBS,S3,RDS,SSM...)
    • Never ever store your secrets in plaintext, especially in your code.
        • KMS Key Encryption also available through API calls(SDK, CLI)
        • Encrypted secrets can be stored in the code / environment variables.

    Key Types:

        • KMS Keys is the new name of KMS Customer Master Key(CMK).
        • KMS Keys or CMKs are "envelop keys", instead of the encryption key for the data itself, but encryption keys of the encryption keys(see Q&A below)
        • Symmetric(AES-256 keys)
            • Single encryption key that used to encrypt AND decrypt.
            • AWS services that are integrated with KMS use Symmetric Keys.
            • You never get access to the KMS key unencrypted(must call KMS API to use).
        • Asymmetric(RSA & ECC key pairs)
            • Public(Encrypt) and Private Key(Decrypt) pair.
            • Used for encrypt/decrypt, or Sign/Verify operations.
            • The public key is downloadable, but you cannot access the Private Key unencrypted.
            • Use case: encryption outside of AWS by users who can't call the KMS API.

    KMS Key Type:

        • AWS Owned Keys(Free): SSE-S3, SSE-SQS, SSE-DDB(default key)
        • AWS Managed Key(Free): aws/service-name (example: aws/rds, or aws/ebs).
        • Customer managed keys created in KMS: $1 / month.
        • Customer managed keys imported: $1 / month.
        • + pay for API call to KMS($0.03 / 10000 calls).

    Automatic Key rotation:
        • AWS-managed KMS Key: automatic every 1 year.
        • Customer-managed KMS Key: (must be enabled) automatic & on-demand.
        • Imported KMS Key: only manual rotation possible using alias.

    Copying Snapshots across regions:
        1. Suppose there is a EBS Volumn encrypted with KMS Key A.
        2. When we snapshot it, the snapshot is ALSO encrypted with KMS Key A.
        3. When we copy that snapshot into another region, that copy must be encrypted with a new KMS Key: KMS Key B.
        4. the new EBS volumn restored from that copy, will also be encrypted with KMS Key B.

    KMS Key Policies:
        • Control access to KMS keys, "similiar" to S3 bucket policies.
        • Difference: you cannot control access without them.

        1. Default KMS Key Policy:
            • Created if you don't provide a specific KMS Key Policy.
            • Complete access to the key for all uses authorized by IAM = entire AWS account.
        
        2. Customer KMS Key Policy:
            • Define users, roles that can access the KMS key.
            • Define who can administer the key.
            • Useful for cross-account access of your KMS key.


    Copying Snapshots across accounts:
        1. Create a Snapshot, encrypted with your own KMS Key(Customer Managed Key).
        2. Attach a KMS Key Policy to authorize cross-account access.
        3. Share the encrypted snapshot.
        4. (in target) Create a copy of the Snapshot, encrypt it with a Customer Managed Key in your account.
        5. Create a volumn from the snapshot.

    GPT Q & A:

    Q: if i recall correctly, typically, KMS does not give you the encryption key directly, instead, it gives the encryption key of the encryption key, is that correct?

    A: 

    Yes, that's correct! AWS KMS uses a method known as envelope encryption, which adds an additional layer of security to the encryption process. Here’s how it works:

    1. Data Key and Envelope Key: 
    - Data Key: This is the key used to encrypt the actual data. AWS KMS generates this key, which is then used locally at your application or by an AWS service to encrypt your data.
    - Envelope Key: Technically known as the Customer Master Key (CMK), the envelope key is used to encrypt the data key itself. This is the key that is managed by AWS KMS.

    2. Process:
    - When you request to encrypt data using KMS, the service generates a plain-text data key and an encrypted version of that key. The plain-text key is used immediately to encrypt your data and then securely discarded from memory.
    - The encrypted data key can be stored alongside the encrypted data. Since only the CMK (managed within KMS and never exposed) can decrypt the encrypted data key, your data remains secure.
    - When you need to decrypt your data, you pass the encrypted data key to KMS. KMS uses the CMK to decrypt the data key into plain-text. You can then use this plain-text data key to decrypt your data.

    3. Security Benefits:
    - Key Isolation: The actual key encrypting your data is never stored persistently in plain-text, which greatly reduces the risk of unauthorized access.
    - Central Management: The CMKs are managed within KMS, allowing for centralized control over key permissions and policies.
    - Auditability: Each use of a CMK to encrypt or decrypt data keys is logged in AWS CloudTrail, providing an audit trail for compliance and security monitoring.

    By using this envelope encryption method, KMS provides a robust security model that maintains the confidentiality and integrity of your encryption keys while simplifying the key management lifecycle.

------------------------------------------------------------------------------------------------

When you use the aws kms encrypt command in the AWS CLI, it primarily returns two pieces of information related to the encryption operation. However, the output specifically includes:

CiphertextBlob: This is the encrypted form of your plaintext data. It's the result of the encryption operation and what you store or transmit securely.

KeyId: This is the identifier of the CMK (Customer Master Key) that was used to encrypt the data key, which in turn encrypted your plaintext data. This is not the encrypted data key itself, but rather a reference to the CMK used in the encryption process.

-------------------------------------------------------------------------------------------------

KMS Multi-Region Keys

    AWS Key Management Service (KMS) is region-bound. Each KMS key is created and managed within a specific AWS region. This design is part of AWS's commitment to ensuring data residency, compliance, and high availability within individual geographic areas.

    To address the needs of applications that operate across multiple regions, AWS introduced Multi-Region Keys. These keys allow you to have the same key(same material, same keyID, same rotation) available in multiple regions, facilitating global operations without needing to manage separate keys in each region, so you can encrypt in one region, and decrypt in another. Therefore, there is no need to make cross-region API calls anymore. This feature is particularly useful for achieving higher availability and durability across geographical locations while maintaining unified key management.

    • KMS Multi-Region keys are NOT global(Primary + Replicas)
    • Each Multi-Region key is managed independently
    • Use cases: Global client-side encryption, encryption on Global DynamoDB, Global Aurora

DynamoDB Global Tables and KMS Multi-Region Keys Client-Side encryption:

    • See pic: https://drive.google.com/file/d/1JNQmHPbeA4n6mbUkQh9WaRn4yqtT1mAV/view?usp=sharing

Global Aurora and KMS Multi-Region Keys Client-Side encryption:

    • See pic: https://drive.google.com/file/d/1eG0ua7bFTH-3iga1mycMR6eQTOqM9RLS/view?usp=sharing


