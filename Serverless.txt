Serverless

• Serverless is a new paradigm in which developers don't have to manage servers anymore.
• They just deploy code.
• They just deploy functions.
• It does NOT mean there are no servers, it just means you don't have to manage them.
• It means FaaS(function as service), INITIALLY, but now it also includes anything that's managed(databases, messaging, storage, etc)
• See picture: https://drive.google.com/file/d/17oSQzZc9Jxblr_YsgvsJZVRWrGouuDQm/view?usp=sharing


Lambda

    1. Compare:
        a. EC2
            • Virtual Servers in Cloud
            • Limited by RAM and CPU
            • Continously running
            • Scaling can be done thru intervention to add / remove servers

        b. Lambda
            • Virtual Functions(no servers to manage)
            • Limited by time(short executions)
            • Run on-demand.
            • Scaling is automated.

Lambda Limits - per region

    • Execution:
        
        • Memory Allocation: 128 MB - 10 GB (1MB increments)
        • Maximum execution time: 15 mins
        • Env Variables(4 kb)
        • Disk Capacity in the "function container" (in /tmp): 512 MB to 10GB
        • Concurrency executions: 1000(can be increased)

    • Deployment:
        
        • Lambda function deployment size(compressed.zip): 50 MB
        • Size of uncompressed deployment(code + dependencies): 250 MB
        • Can use the /tmp directory to load other files at startup.
        • Size of env variables: 4 kb


Customization At the Edge
    • Edge Function:
        • A code that you write and attach to a CloudFront Distributions
        • Runs close to your users to minimize latency
        • No need to manage any servers, deployed globally
        • Pay only for what you use
        • Fully serverless
        • Use cases: https://drive.google.com/file/d/1obT7Uv-vty7cXaGlr8FrAE9B6AEeii82/view?usp=sharing

    • CloudFront provides two types of edge functions:
        • CloudFront Functions
        • Lambda@Edge

    • CloudFront Functions (https://drive.google.com/file/d/1K2Ft3V5dMdPljk3BR2Y7lzLzy6jWIQYU/view?usp=sharing)
        
        • GPT explain:
            1. **Initial Request Goal**: When a client (like a browser or mobile app) sends an HTTP request, it aims to fetch content from the CDN — specifically, from CloudFront's distributed cache. The expectation is that CloudFront will serve the requested content directly from the nearest edge location, where it is cached, to ensure fast delivery.

            2. **CDN Cache Check**: Upon receiving the request, CloudFront first checks its cache to see if the content is available and fresh. If the content is present in the cache and considered fresh according to the caching policies, it is served directly to the client from the CDN without involving the origin server.

            3. **Fetching from Origin Server**:
            - **Scenario**: If the requested content is not in the cache, or it is stale (out-of-date according to the cache policy), then CloudFront needs to retrieve the fresh content from the origin server. This is when the origin server comes into play.
            - **CloudFront Functions Role**: Before CloudFront forwards the request to the origin server to fetch or refresh the content, CloudFront Functions can modify this request. This can include changes like altering HTTP headers, changing the URL path, or adding query strings. These modifications can be used for various purposes, such as implementing custom authorization, directing traffic, or modifying requests for A/B testing.

            4. **Content Retrieval and Caching**: Once the content is retrieved from the origin server, it is cached by CloudFront at the edge location. Subsequent requests for the same content can be served directly from the cache, minimizing the need to repeatedly fetch it from the origin.

    • Lambda@Edge (https://drive.google.com/file/d/1TNsAPRZ3PJHLWiDsBuN3B1Ln3a1DOgJ_/view?usp=sharing)

    
    • CloudFront Functions vs Lambda@Edge (https://drive.google.com/file/d/1FZou3sF6Tf1o6k9c8J2-3XPGdVpmVenq/view?usp=sharing)
        • Pay attention to "CloudFront triggers"
        • CloudFront functions can only alter viewer side(viewer request, viewer response), yet Lambda@Edge can handle both source and viewer side.
        • Use cases: https://drive.google.com/file/d/12ZrgPzLwkpiBHGM0e_OQ197jWQt4mLhA/view?usp=sharing
    
    
Lambda and VPC

    • By default, your Lambda function is launched OUTSIDE your own VPC(in an AWS-owned VPC), therefore, no access to resource in the vpc(RDS, ElastiCache, internal ELB...)
    • Lambda in VPC:
        • You must define the VPC ID, the Subnets and the Security Groups.
        • Lambda will create an ENI(Elastic Network Interface) in your subnets. (https://drive.google.com/file/d/1yslsTWx9v7WNVlt78URh7GpJAaSY9FoZ/view?usp=sharing)
            • Lambda is still outside of the VPC by itself, but it now has a "delegate" or "proxy" inside the VPC, a temporary address inside the VPC, so other instances within the same VPC can communicate with it. 
        • Lambda with RDS Proxy: (https://drive.google.com/file/d/1GXxAhYgVDggPABU8EvmlY7C5a5Edy6wc/view?usp=sharing)
        

DynamoDB

    • Fully managed, highly available with replication across multiple AZs.
    • NoSQL DB
    • Scales to massive workload, distributed database.
    • Millions of requests per seconds, trillions of row, 100s of TB of storage.
    • Fast and consistent in performance
    • Integrated with IAM
    • Low cost and auto-scale
    • No maintenance or patching, always available.
    • Standard & Infrequence Access(IA) Table Class.

DynamoDB Basic

    • Made of Tables.
    • Each table has a Primary Key(must be decided at creation time)
    • Each table can have an infinite number of items(=rows)
    • Each items has attributes(can be added over time - can be null)
    • Max size of an item is 400kb
    • Data types supported are:
        • Scalar Types - String, Number, Binary, Boolean, Null
        • DocumentTypes - List, Map
        • Set Types - String Set, Number Set, Binary Set

    • If the schema needs to be rapidly evolve, then DynamoDB > RDS

    Read/Write Capacity Modes
        
        • Control how you manage your table's capacity(read/write throughput)
        • Provisioned Mode(default)
            • You specify the number of reads / writes per sec
            • You need to plan capacity beforehand
            • Pay for provisioned Read Capacity Units(RCU) & Write Capacity Units(WCU)
            • Possible to add auto-scaling mode for RCU & WCU
        • On-Demand Mode
            • Read/Writes automatically scale up / down with your workloads.
            • No capacity planning needed.
            • Pay for what you use, more expensive($$$)
            • Great for unpredictable workloads, steep sudden spikes.
